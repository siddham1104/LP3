import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from math import sqrt


df = pd.read_csv('uber.csv')
df

df.columns

df.drop(['Unnamed: 0','key'],axis =1,inplace = True)

df.info()

df.fillna(method='ffill', inplace=True) # Forward fill

df.isnull().sum()

data_column = 'fare_amount'

#Outliers
# Plotting boxplot
plt.figure(figsize=(8, 6))
plt.boxplot(df[data_column], vert=True)
plt.title(f'Box Plot of {data_column}')
plt.xlabel(data_column)
plt.show()

df[df['fare_amount'].values <= 0]

# Dropping rows with fare_amout <= 0
df.drop(df[df['fare_amount'].values<=0].index,inplace=True)
df[df['fare_amount'].values<=0]


data_column = 'passenger_count'

# Plotting boxplot
plt.figure(figsize=(8, 6))
plt.boxplot(df[data_column], vert=True)
plt.title(f'Box Plot of {data_column}')
plt.xlabel(data_column)
plt.show()


df[df['passenger_count'] > 6]

df.drop(df[df['passenger_count'] > 6].index, inplace=True)

def filter_latitude(val):
    if val < -90 or val > 90:
        return np.nan
    else:
        return val

def filter_longitude(val):
    if val < -180 or val > 180:
        return np.nan
    else:
        return val


df['pickup_longitude'] = df['pickup_longitude'].apply(filter_longitude)
df['pickup_latitude'] = df['pickup_latitude'].apply(filter_latitude)
df['dropoff_longitude'] = df['dropoff_longitude'].apply(filter_longitude)
df['dropoff_latitude'] = df['dropoff_latitude'].apply(filter_latitude)

df.isnull().sum()

df.dropna(inplace=True)

#distance
# calculate the distance between pickup and dropoff using geopy library
from geopy.distance import great_circle
# used to calculate the distance using latitude and longitude

def distance_km(x):
    pickup = (x['pickup_latitude'], x['pickup_longitude'])
    dropoff = (x['dropoff_latitude'], x['dropoff_longitude'])
    return great_circle(pickup, dropoff).km

df['distance_km'] = df.apply(lambda x: distance_km(x), axis=1)

df.drop(['pickup_longitude', 'pickup_latitude','dropoff_longitude', 'dropoff_latitude'] , inplace=True , axis= 1)


df.describe()

#dates

# convert the col pickup_datetime type to date and split it to Year and Month
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'] )

# extract day, weekday, month, year, hour from pickup_datetime
df['day'] = df['pickup_datetime'].dt.day_name()
df['weekday'] = df['pickup_datetime'].dt.weekday
df['month'] = df['pickup_datetime'].dt.month_name()
df['year'] = df['pickup_datetime'].dt.year
df['hour'] = df['pickup_datetime'].dt.hour

# drop pickup_datetime
df.drop('pickup_datetime', axis=1, inplace=True)

df.head()

# Initialize LabelEncoders for 'day' and 'month' columns
label_encoder_day = LabelEncoder()
label_encoder_month = LabelEncoder()

# Fit and transform the 'day' and 'month' columns
df['day'] = label_encoder_day.fit_transform(df['day'])
df['month'] = label_encoder_month.fit_transform(df['month'])

#correlation

correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=False, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()


X = df[['passenger_count', 'distance_km', 'day', 'weekday',
       'month', 'year', 'hour']]
y = df['fare_amount']

# Train test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply Standardization (z-score scaling) to the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


# Linear regression model
lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

# Predictions
y_pred_lr = lr.predict(X_test_scaled)

# Model Evaluation
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))
r2_lr = r2_score(y_test, y_pred_lr)

print('RMSE:', rmse_lr)
print('R2:', r2_lr)


# Linear regression model
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)

# Predictions
y_pred_rf = rf.predict(X_test_scaled)

# Model Evaluation
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
r2_rf = r2_score(y_test, y_pred_rf)

print('RMSE:', rmse_rf)
print('R2:', r2_rf)

models = ['Linear Regression', 'Random Forest']
rmse_values = [rmse_lr, rmse_rf]
r2_values = [r2_lr, r2_rf]

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(6, 3))

# Plot RMSE values
ax1.bar(models, rmse_values, color=['blue', 'green'])
ax1.set_ylabel('RMSE')
ax1.set_title('RMSE Comparison')
ax1.set_ylim(0, max(rmse_values) + 2)

# Plot R2 values
ax2.bar(models, r2_values, color=['blue', 'green'])
ax2.set_ylabel('R2')
ax2.set_title('R2 Comparison')
ax2.set_ylim(0, 1)

plt.tight_layout()
plt.show()

