# dp
# he overall time complexity of the provided code is O(n*W), where "n" 
# is the number of items and "W" is the maximum weight capacity of the knapsack.

def knapsack_dp(val, wt, W, n):
    k = [[0 for _ in range (W+1)] for _ in range (n+1)]
    for i in range (n+1):
        for w in range (W+1): 
            if i==0 or w ==0:
                k[i][w] = 0
            elif wt[i-1] <= w:
                k[i][w] = max(val[i-1]+k[i-1][w-wt[i-1]], k[i-1][w])
            else:
                k[i][w] = k[i-1][w]
    return k[n][W]

val = [1,2,5,6]
wt = [2,3,4,5]
W = 8 
n = len(val)

print(f"total profit : {knapsack_dp(val, wt, W, n)}")